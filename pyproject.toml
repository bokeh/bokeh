[build-system]
requires = ["setuptools>=64", "setuptools-git-versioning", "colorama"]
build-backend = "setuptools.build_meta"

[project]
name = "bokeh"
dynamic = ["version"]
description = "Interactive plots and applications in the browser from Python"
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "Jinja2 >=2.9",
    "contourpy >=1",
    "numpy >=1.11.3",
    "packaging >=16.8",
    "pandas >=1.2",
    "pillow >=7.1.0",
    "PyYAML >=3.10",
    "tornado >=5.1",
    "typing_extensions >=3.10.0",
    "xyzservices >=2021.09.1",
]
authors = [
  {email = "info@bokeh.org"},
  {name = "Bokeh Team"}
]
license = {file = "LICENSE.txt"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Legal Industry",
    "Intended Audience :: Other Audience",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: JavaScript",
    "Topic :: Office/Business",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Utilities",
]

[project.urls]
homepage = "https://bokeh.org"
documentation = "https://docs.bokeh.org"
repository = "https://github.com/bokeh/bokeh"

[project.scripts]
bokeh = "bokeh.__main__:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools-git-versioning]
enabled = true
dev_template = "{tag}+{ccount}.g{sha}"
dirty_template = "{tag}+{ccount}.g{sha}.dirty"

[tool.pytest.ini_options]
addopts = "--no-success-flaky-report"
asyncio_mode = "strict"
norecursedirs = "build _build node_modules tests/support"
python_files = "*_tests.py *_test.py test_*.py"
markers = [
    "sampledata: a test for bokeh.sampledata",
    "selenium: a test as requiring selenium",
]

[tool.coverage.run]
source = ["bokeh"]
omit = ["*sphinxext/*"]

[tool.mypy]
python_version = "3.8"
mypy_path = "src/typings/"
files = ["src/typings", "src/bokeh", "release", "tests"]

strict = true

pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

disallow_any_unimported = true
implicit_reexport = true
namespace_packages = true
warn_return_any = false
warn_unreachable = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
]

# For now enable each typed module individually.
[[tool.mypy.overrides]]
module = [
    "bokeh.*",
    "tests.*",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "bokeh.client.states",
    "bokeh.colors.*",
    "bokeh.command.*",
    "bokeh.core.json_encoder",

    "bokeh.core.properties",
    "bokeh.core.property", # TODO: .*
    "bokeh.core.property_mixins",

    #"bokeh.core.property.alias",
    "bokeh.core.property.any",
    "bokeh.core.property.auto",
    #"bokeh.core.property.bases",
    "bokeh.core.property.color",
    #"bokeh.core.property.container",
    #"bokeh.core.property.dataspec",
    "bokeh.core.property.datetime",
    #"bokeh.core.property.descriptor_factory",
    #"bokeh.core.property.descriptors",
    #"bokeh.core.property.either",
    "bokeh.core.property.enum",
    "bokeh.core.property.factors",
    "bokeh.core.property.include",
    #"bokeh.core.property.instance",
    "bokeh.core.property.json",
    "bokeh.core.property.nothing",
    "bokeh.core.property.nullable",
    "bokeh.core.property.numeric",
    "bokeh.core.property.override",
    "bokeh.core.property.pd",
    "bokeh.core.property.primitive",
    "bokeh.core.property.readonly",
    "bokeh.core.property.required",
    "bokeh.core.property.serialized",
    "bokeh.core.property.singletons",
    "bokeh.core.property.string",
    #"bokeh.core.property.struct",
    "bokeh.core.property.text_like",
    #"bokeh.core.property.validation",
    #"bokeh.core.property.vectorization",
    #"bokeh.core.property.visual",
    #"bokeh.core.property.wrappers",

    "bokeh.core.query",
    "bokeh.core.serialization",
    "bokeh.core.templates",
    "bokeh.core.types",
    "bokeh.core.validation",

    "bokeh.document.callbacks",
    "bokeh.document.json",
    "bokeh.document.locking",
    "bokeh.document.models",
    "bokeh.document.modules",

    "bokeh.driving",

    "bokeh.embed.standalone",
    "bokeh.embed.wrappers",

    "bokeh.ext.*",
    "bokeh.io.*",

    "bokeh.palettes",
    "bokeh.plotting._tools",
    "bokeh.protocol.*",
    "bokeh.sampledata.*",

    "bokeh.server.callbacks",
    "bokeh.server.server",
    "bokeh.server.tornado",
    "bokeh.server.urls",
    "bokeh.server.util",

    "bokeh.util.*",
    "tests.codebase.*",
    "tests.support.defaults",
    "tests.test_bokehjs",
    "tests.test_defaults",
    "tests.test_examples",
    "tests.unit.bokeh.document.test_callbacks__document",
    "tests.unit.bokeh.embed.test_standalone",
    #"tests.unit.bokeh.models._util_models",
]
ignore_errors = false

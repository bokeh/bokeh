name: Bokeh-CI

on:
  push:
    branches:
      - main
      - branch-*
  pull_request:

defaults:
  run:
    shell: bash -l {0}

env:
  CHROME_VER: "103.0.5060.53"
  CHROME_REV: "chromium_2020"

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # full history to get proper build version
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: 'latest'
          activate-environment: bk-test
          environment-file: ci/environment-build.yml

      - name: Install node modules
        run: bash ci/install_node_modules.sh

      - name: Build BokehJS
        working-directory: ./bokehjs
        run: node make build

      - name: Build pip pacakges
        env:
          BOKEHJS_ACTION: 'install'
        run: python -m build .

      - name: Verify pip install from sdist
        run: bash ci/verify_pip_install_from_sdist.sh

      - name: Build conda package
        run: bash ci/build_conda_pacakge.sh

      - name: Upload conda package
        uses: actions/upload-artifact@v3
        with:
          name: conda-bld-noarch
          path: /tmp/conda-bld-noarch.tgz

  codebase:
    needs: build
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Configure line endings in git
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - uses: actions/checkout@v2

      - name: Prepare Environment
        uses: ./.github/workflows/composite/test-setup
        with:
          test-env: '3.9'
          source-tree: 'keep'
          sampledata: 'cache'

      - name: Run codebase checks
        run: pytest --color=yes tests/codebase

      - name: MyPy
        run: mypy --version && mypy

  examples:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Environment
        uses: ./.github/workflows/composite/test-setup
        with:
          test-env: '3.8'
          source-tree: 'delete'
          sampledata: 'cache'

      - name: Install chromium
        if: runner.os == 'Linux'
        run: |
          if [[ "$(chromium --version | cut -d' ' -f2)" = "$CHROME_VER" ]]; then
            echo "Using pre-installed version of chromium"
          else
            URL=https://github.com/bokeh/chromium/raw/main/linux/$CHROME_VER
            wget --no-verbose $URL/$CHROME_REV.assert
            wget --no-verbose $URL/$CHROME_REV.snap

            sudo snap ack $CHROME_REV.assert
            sudo snap install $CHROME_REV.snap
          fi

      - name: Start chrome headless
        working-directory: ./bokehjs
        run: node make test:spawn:headless # starts chrome in the background on port 9222

      - name: Run tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: pytest -s -v --color=yes --tb line tests/test_examples.py

      - name: Collect results
        if: always()
        env:
          DST: "examples-report"
        run: |
          mkdir -p ${DST}
          cp --parents examples-report.html $(cat .images-list) ${DST}

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: examples-report
          path: examples-report

  js-test:
    needs: build
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Environment
        uses: ./.github/workflows/composite/test-setup
        with:
          test-env: '3.8'
          source-tree: 'keep'
          sampledata: 'cache'

      - name: Install chromium
        if: runner.os == 'Linux'
        run: |
          if [[ "$(chromium --version | cut -d' ' -f2)" = "$CHROME_VER" ]]; then
            echo "Using pre-installed version of chromium"
          else
            URL=https://github.com/bokeh/chromium/raw/main/linux/$CHROME_VER
            wget --no-verbose $URL/$CHROME_REV.assert
            wget --no-verbose $URL/$CHROME_REV.snap

            sudo snap ack $CHROME_REV.assert
            sudo snap install $CHROME_REV.snap
          fi

      - name: Run tests
        working-directory: bokehjs
        run: node make test --screenshot=skip

  integration-tests:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Environment
        uses: ./.github/workflows/composite/test-setup
        with:
          test-env: '3.8'
          source-tree: 'delete'
          sampledata: 'cache'

      - name: Run tests
        run: pytest -v --tb=short --driver chrome --color=yes tests/integration

  unit-test:
    needs: build
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10']

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Environment
        uses: ./.github/workflows/composite/test-setup
        with:
          test-env: ${{ matrix.python-version }}
          source-tree: 'delete'
          sampledata: 'cache'

      - name: Ensure Python version
        run: if [[ ! "$(python --version | cut -d' ' -f2)" == "${{ matrix.python-version }}"* ]]; then exit 1; fi

      - name: Run tests
        run: pytest --cov=bokeh --color=yes tests/unit

  minimal-deps:
    needs: build
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Environment
        uses: ./.github/workflows/composite/test-setup
        with:
          test-env: 'minimal-deps'
          source-tree: 'delete'
          sampledata: 'none' # no sampledata for minimal tests

      - name: Run tests
        run: pytest -m "not sampledata" --cov=bokeh --color=yes tests/unit

  documentation:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Environment
        uses: ./.github/workflows/composite/test-setup
        with:
          test-env: '3.8'
          source-tree: 'delete'
          sampledata: 'download' # test at least one real download

      - name: Build docs
        run: bash ci/build_docs.sh

      - name: Upload docs
        uses: actions/upload-artifact@v3
        with:
          name: docs-html
          path: sphinx/docs-html.tgz

  downstream:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare Environment
        uses: ./.github/workflows/composite/test-setup
        with:
          test-env: 'downstream'
          source-tree: 'delete'
          sampledata: 'none'

      - name: Install downstream packages
        run: bash ci/install_downstream_packages.sh

      - name: Run tests
        run: bash ci/run_downstream_tests.sh

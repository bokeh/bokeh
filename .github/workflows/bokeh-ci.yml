name: GitHub-CI

on: [pull_request]

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2-beta

      - name: Install Miniconda
        shell: bash
        run: |
          if [[ "${{ runner.os }}" = "Linux" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
          elif [[ "${{ runner.os }}" = "macOS" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
          elif [[ "${{ runner.os }}" = "Windows" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
          fi
          curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
          bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3

      - name: Setup paths
        shell: bash
        run: |
          echo "::add-path::$HOME/miniconda3/bin"

      - name: Configure conda
        shell: bash
        env:
          CONDA_REQS: "conda=4.7.12 conda-build=3.18.10 conda-verify=3.4.2 ripgrep=0.10.0 jinja2"
        run: |
          conda config --set auto_update_conda off
          conda config --append channels bokeh
          conda config --get channels
          conda install --yes --quiet $CONDA_REQS

      - name: Install conda packages
        run: |
          BUILD_DEPS=`python scripts/deps.py build`
          conda install --yes --quiet $BUILD_DEPS

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('bokehjs/package-lock.json') }}

      - name: Install node modules
        run: |
          pushd bokehjs
          npm install -g npm
          npm ci --no-progress
          popd

      - name: Build BokehJS
        run: |
          pushd bokehjs
          node make build
          popd
          tar czf bokehjs-build.tgz "bokehjs/build"

      - name: Upload BokehJS
        uses: actions/upload-artifact@v1
        with:
          name: bokehjs-build
          path: bokehjs-build.tgz

      - name: Build conda package
        run: |
          conda build conda.recipe --quiet --no-test --no-anaconda-upload --no-verify
          pushd $HOME
          tar czf conda-bld-noarch.tgz "miniconda3/conda-bld/noarch"
          popd
          mv $HOME/conda-bld-noarch.tgz .

      - name: Upload conda package
        uses: actions/upload-artifact@v1
        with:
          name: conda-bld-noarch
          path: conda-bld-noarch.tgz





  codebase:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2-beta

      - name: Install Miniconda
        shell: bash
        run: |
          if [[ "${{ runner.os }}" = "Linux" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
          elif [[ "${{ runner.os }}" = "macOS" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
          elif [[ "${{ runner.os }}" = "Windows" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
          fi
          curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
          bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3

      - name: Setup paths
        shell: bash
        run: |
          echo "::add-path::$HOME/miniconda3/bin"

      - name: Configure conda
        shell: bash
        env:
          CONDA_REQS: "conda=4.7.12 conda-build=3.18.10 conda-verify=3.4.2 ripgrep=0.10.0 jinja2"
        run: |
          conda config --set auto_update_conda off
          conda config --append channels bokeh
          conda config --get channels
          conda install --yes --quiet $CONDA_REQS

      - name: Install conda packages
        shell: bash
        run: |
          conda install --yes --quiet python=${{ matrix.python-version }} jinja2 pyyaml
          conda install --yes --quiet --use-local bokeh `python scripts/deps.py run test`

      # XXX: until channels is available on conda-forge
      - name: Install pip packages
        shell: bash
        run: |
          pip install channels

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('bokehjs/package-lock.json') }}

      - name: Install node modules
        run: |
          pushd bokehjs
          npm install -g npm
          npm ci --no-progress
          popd

      # Don't cache sampledata - want to test at least one real download

      - name: Install sampledata
        shell: bash
        run: |
          python -c 'import bokeh; bokeh.sampledata.download(progress=False)'

      - name: Run codebase checks
        shell: bash
        run: |
          pushd bokehjs
          node make scripts:compile --emit-error
          node make test:compile --emit-error
          PARSER_NO_WATCH=true node make lint --emit-error
          popd

          py.test -m codebase --color=yes tests

      - name: MyPy
        shell: bash
        run: |
          mypy bokeh






  examples:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2-beta

      - name: Install Miniconda
        shell: bash
        run: |
          if [[ "${{ runner.os }}" = "Linux" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
          elif [[ "${{ runner.os }}" = "macOS" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
          elif [[ "${{ runner.os }}" = "Windows" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
          fi
          curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
          bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3

      - name: Setup paths
        shell: bash
        run: |
          echo "::add-path::$HOME/miniconda3/bin"

      - name: Configure conda
        shell: bash
        env:
          CONDA_REQS: "conda=4.7.12 conda-build=3.18.10 conda-verify=3.4.2 ripgrep=0.10.0 jinja2"
        run: |
          conda config --set auto_update_conda off
          conda config --append channels bokeh
          conda config --get channels
          conda install --yes --quiet $CONDA_REQS

      - name: Download Bokehjs
        uses: actions/download-artifact@v1
        with:
          name: bokehjs-build

      - name: Download conda package
        uses: actions/download-artifact@v1
        with:
          name: conda-bld-noarch

      - name: Unpack artifacts
        shell: bash
        run: |
          mv conda-bld-noarch/conda-bld-noarch.tgz $HOME
          pushd $HOME
          tar xzf conda-bld-noarch.tgz
          popd
          tar xvzf bokehjs-build/bokehjs-build.tgz

      - name: Install conda packages
        shell: bash
        run: |
          conda install --yes --quiet python=${{ matrix.python-version }} jinja2 pyyaml
          conda install --yes --quiet --use-local bokeh `python scripts/deps.py run test`

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('bokehjs/package-lock.json') }}

      - name: Install node modules
        run: |
          pushd bokehjs
          npm install -g npm
          npm ci --no-progress
          node make examples --no-build
          popd
          python setup.py --install-js

      - name: Install chrome
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install software-properties-common
          sudo add-apt-repository ppa:canonical-chromium-builds/stage
          sudo apt-get update
          sudo apt-get install chromium-browser

      - name: Start chrome headless
        shell: bash
        run: |
          chromium-browser --headless --no-sandbox --remote-debugging-port=9222 &

      - name: Cache sampledata
        uses: actions/cache@v1
        with:
          path: ~/.bokeh/data
          key: ${{ runner.os }}-sampledata-${{ hashFiles('bokeh/util/sampledata.json') }}

      - name: Install sampledata
        shell: bash
        run: |
          python -c 'import bokeh; bokeh.sampledata.download(progress=False)'

      - name: Run tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        shell: bash
        run: |
          py.test -s -v -m examples     \
            --color=yes                 \
            --tb line                   \
            --diff-ref FETCH_HEAD       \
            --self-contained-html       \
            --report-path=examples.html \
            --upload






  js-test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2-beta

      - name: Install Miniconda
        shell: bash
        run: |
          if [[ "${{ runner.os }}" = "Linux" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
          elif [[ "${{ runner.os }}" = "macOS" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
          elif [[ "${{ runner.os }}" = "Windows" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
          fi
          curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
          bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3

      - name: Setup paths
        shell: bash
        run: |
          echo "::add-path::$HOME/miniconda3/bin"

      - name: Configure conda
        shell: bash
        env:
          CONDA_REQS: "conda=4.7.12 conda-build=3.18.10 conda-verify=3.4.2 ripgrep=0.10.0 jinja2"
        run: |
          conda config --set auto_update_conda off
          conda config --append channels bokeh
          conda config --get channels
          conda install --yes --quiet $CONDA_REQS

      - name: Download Bokehjs
        uses: actions/download-artifact@v1
        with:
          name: bokehjs-build

      - name: Download conda package
        uses: actions/download-artifact@v1
        with:
          name: conda-bld-noarch

      - name: Unpack artifacts
        shell: bash
        run: |
          mv conda-bld-noarch/conda-bld-noarch.tgz $HOME
          pushd $HOME
          tar xzf conda-bld-noarch.tgz
          popd
          tar xvzf bokehjs-build/bokehjs-build.tgz

      - name: Install conda packages
        shell: bash
        run: |
          conda install --yes --quiet python=${{ matrix.python-version }} jinja2 pyyaml
          conda install --yes --quiet --use-local bokeh `python scripts/deps.py run test`

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('bokehjs/package-lock.json') }}

      - name: Install node modules
        run: |
          pushd bokehjs
          npm install -g npm
          npm ci --no-progress
          popd
          python setup.py --install-js

      - name: Install chrome
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install software-properties-common
          sudo add-apt-repository ppa:canonical-chromium-builds/stage
          sudo apt-get update
          sudo apt-get install chromium-browser

      - name: Start chrome headless
        shell: bash
        run: |
          chromium-browser --headless --no-sandbox --remote-debugging-port=9222 &

      - name: Run tests
        shell: bash
        run: |
          py.test -s -m js --color=yes tests




  integration-tests:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2-beta

      - name: Install Miniconda
        shell: bash
        run: |
          if [[ "${{ runner.os }}" = "Linux" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
          elif [[ "${{ runner.os }}" = "macOS" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
          elif [[ "${{ runner.os }}" = "Windows" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
          fi
          curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
          bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3

      - name: Setup paths
        shell: bash
        run: |
          echo "::add-path::$HOME/miniconda3/bin"

      - name: Configure conda
        shell: bash
        env:
          CONDA_REQS: "conda=4.7.12 conda-build=3.18.10 conda-verify=3.4.2 ripgrep=0.10.0 jinja2"
        run: |
          conda config --set auto_update_conda off
          conda config --append channels bokeh
          conda config --get channels
          conda install --yes --quiet $CONDA_REQS

      - name: Download Bokehjs
        uses: actions/download-artifact@v1
        with:
          name: bokehjs-build

      - name: Download conda package
        uses: actions/download-artifact@v1
        with:
          name: conda-bld-noarch

      - name: Unpack artifacts
        shell: bash
        run: |
          mv conda-bld-noarch/conda-bld-noarch.tgz $HOME
          pushd $HOME
          tar xzf conda-bld-noarch.tgz
          popd
          tar xvzf bokehjs-build/bokehjs-build.tgz

      - name: Install conda packages
        shell: bash
        run: |
          conda install --yes --quiet python=${{ matrix.python-version }} jinja2 pyyaml
          conda install --yes --quiet --use-local bokeh `python scripts/deps.py run test`

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('bokehjs/package-lock.json') }}

      - name: Install node modules
        run: |
          pushd bokehjs
          npm install -g npm
          npm ci --no-progress
          popd
          python setup.py --install-js

      - name: Install chromedriver
        shell: bash
        run: |
          sudo apt-get -y update
          sudo apt-get -y install unzip xvfb libxi6 libgconf-2-4
          sudo apt-get -y install google-chrome-stable
          curl -o  chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/2.42/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/bin/chromedriver
          sudo chown root:root /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver

      - name: Run tests
        shell: bash
        run: |
          py.test -v --tb=short -m integration --driver chrome --color=yes tests




  unit-test:
    needs: build
    runs-on: ${{ matrix.os }}

    strategy:
      max-parallel: 6
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7]

    steps:
      - uses: actions/checkout@v2-beta

      - name: Install Miniconda
        shell: bash
        run: |
          if [[ "${{ runner.os }}" = "Linux" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
            curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
            bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3
          elif [[ "${{ runner.os }}" = "macOS" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
            curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
            bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3
          elif [[ "${{ runner.os }}" = "Windows" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
            curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
            ./Miniconda3-latest-Windows-x86_64.exe //InstallationType=JustMe //RegisterPython=0 //S
          fi

      - name: Setup paths
        shell: bash
        run: |
          if [[ "${{ runner.os }}" = "Windows" ]]; then
            echo "::add-path::$HOME/miniconda3"
            echo "::add-path::$HOME/miniconda3/Scripts"
          else
            echo "::add-path::$HOME/miniconda3/bin"
          fi

      - name: Configure conda
        shell: bash
        env:
          CONDA_REQS: "conda=4.7.12 conda-build=3.18.10 conda-verify=3.4.2 jinja2"
        run: |
          conda config --set auto_update_conda off
          conda config --append channels bokeh
          conda config --get channels
          conda install --yes --quiet $CONDA_REQS

      - name: Download Bokehjs
        uses: actions/download-artifact@v1
        with:
          name: bokehjs-build

      - name: Download conda package
        uses: actions/download-artifact@v1
        with:
          name: conda-bld-noarch

      - name: Unpack artifacts
        shell: bash
        run: |
          mv conda-bld-noarch/conda-bld-noarch.tgz $HOME
          pushd $HOME
          tar xzf conda-bld-noarch.tgz
          popd
          tar xvzf bokehjs-build/bokehjs-build.tgz

      - name: Install conda packages
        shell: bash
        run: |
          conda install --yes --quiet python=${{ matrix.python-version }} jinja2 pyyaml
          conda install --yes --quiet --use-local bokeh `python scripts/deps.py run test`

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('bokehjs/package-lock.json') }}

      - name: Install node modules
        run: |
          pushd bokehjs
          npm install -g npm
          npm install -g phantomjs-prebuilt
          npm ci --no-progress
          popd
          python setup.py --install-js

      - name: Cache sampledata
        uses: actions/cache@v1
        with:
          path: ~/.bokeh/data
          key: ${{ runner.os }}-sampledata-${{ hashFiles('bokeh/util/sampledata.json') }}

      - name: Install sampledata
        shell: bash
        run: |
          python -c 'import bokeh; bokeh.sampledata.download(progress=False)'

      - name: Run tests
        shell: bash
        run: |
          if [[ "${{ runner.os }}" = "Windows" ]]; then
            source activate base
          fi
          py.test -m unit --cov=bokeh --cov-config=.coveragerc --color=yes tests




  minimal-deps:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2-beta

      - name: Install Miniconda
        shell: bash
        run: |
          if [[ "${{ runner.os }}" = "Linux" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
          elif [[ "${{ runner.os }}" = "macOS" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
          elif [[ "${{ runner.os }}" = "Windows" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
          fi
          curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
          bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3

      - name: Setup paths
        shell: bash
        run: |
          echo "::add-path::$HOME/miniconda3/bin"

      - name: Configure conda
        shell: bash
        env:
          CONDA_REQS: "conda=4.7.12 conda-build=3.18.10 conda-verify=3.4.2 ripgrep=0.10.0 jinja2"
        run: |
          conda config --set auto_update_conda off
          conda config --append channels bokeh
          conda config --get channels
          conda install --yes --quiet $CONDA_REQS

      - name: Download Bokehjs
        uses: actions/download-artifact@v1
        with:
          name: bokehjs-build

      - name: Download conda package
        uses: actions/download-artifact@v1
        with:
          name: conda-bld-noarch

      - name: Unpack artifacts
        shell: bash
        run: |
          mv conda-bld-noarch/conda-bld-noarch.tgz $HOME
          pushd $HOME
          tar xzf conda-bld-noarch.tgz
          popd
          tar xvzf bokehjs-build/bokehjs-build.tgz

      - name: Install conda packages
        shell: bash
        run: |
          conda install --yes --quiet python=${{ matrix.python-version }} jinja2 pyyaml
          conda install --yes --quiet --use-local bokeh `python scripts/deps.py run test`
          conda remove --yes --quiet --no-pin pandas scipy notebook scikit-learn sympy flask

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('bokehjs/package-lock.json') }}

      - name: Install node modules
        run: |
          pushd bokehjs
          npm install -g npm
          npm ci --no-progress
          popd
          python setup.py --install-js

      - name: Run tests
        shell: bash
        run: |
          py.test -m "unit and not sampledata" --cov=bokeh --cov-config=.coveragerc --color=yes tests









  documentation:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2-beta

      - name: Install Miniconda
        shell: bash
        run: |
          if [[ "${{ runner.os }}" = "Linux" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
          elif [[ "${{ runner.os }}" = "macOS" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
          elif [[ "${{ runner.os }}" = "Windows" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
          fi
          curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
          bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3

      - name: Setup paths
        shell: bash
        run: |
          echo "::add-path::$HOME/miniconda3/bin"

      - name: Configure conda
        shell: bash
        env:
          CONDA_REQS: "conda=4.7.12 conda-build=3.18.10 conda-verify=3.4.2 ripgrep=0.10.0 jinja2"
        run: |
          conda config --set auto_update_conda off
          conda config --append channels bokeh
          conda config --get channels
          conda install --yes --quiet $CONDA_REQS

      - name: Download Bokehjs
        uses: actions/download-artifact@v1
        with:
          name: bokehjs-build

      - name: Download conda package
        uses: actions/download-artifact@v1
        with:
          name: conda-bld-noarch

      - name: Unpack artifacts
        shell: bash
        run: |
          mv conda-bld-noarch/conda-bld-noarch.tgz $HOME
          pushd $HOME
          tar xzf conda-bld-noarch.tgz
          popd
          tar xvzf bokehjs-build/bokehjs-build.tgz

      - name: Install conda packages
        shell: bash
        run: |
          conda install --yes --quiet python=${{ matrix.python-version }} jinja2 pyyaml
          conda install --yes --quiet --use-local bokeh `python scripts/deps.py run test`

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('bokehjs/package-lock.json') }}

      - name: Install node modules
        run: |
          pushd bokehjs
          npm install -g npm
          npm ci --no-progress
          popd
          python setup.py --install-js

      - name: Cache sampledata
        uses: actions/cache@v1
        with:
          path: ~/.bokeh/data
          key: ${{ runner.os }}-sampledata-${{ hashFiles('bokeh/util/sampledata.json') }}

      - name: Install sampledata
        shell: bash
        run: |
          python -c 'import bokeh; bokeh.sampledata.download(progress=False)'

      - name: Build docs
        shell: bash
        run: |
          cd sphinx
          export GOOGLE_API_KEY=${GOOGLE_API_KEY:-"unset"}
          make SPHINXOPTS=-v all







  downstream:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2-beta

      - name: Install Miniconda
        shell: bash
        run: |
          if [[ "${{ runner.os }}" = "Linux" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
          elif [[ "${{ runner.os }}" = "macOS" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
          elif [[ "${{ runner.os }}" = "Windows" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
          fi
          curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
          bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3

      - name: Setup paths
        shell: bash
        run: |
          echo "::add-path::$HOME/miniconda3/bin"

      - name: Configure conda
        shell: bash
        env:
          CONDA_REQS: "conda=4.7.12 conda-build=3.18.10 conda-verify=3.4.2 ripgrep=0.10.0 jinja2"
        run: |
          conda config --set auto_update_conda off
          conda config --append channels bokeh
          conda config --get channels
          conda install --yes --quiet $CONDA_REQS

      - name: Download Bokehjs
        uses: actions/download-artifact@v1
        with:
          name: bokehjs-build

      - name: Download conda package
        uses: actions/download-artifact@v1
        with:
          name: conda-bld-noarch

      - name: Unpack artifacts
        shell: bash
        run: |
          mv conda-bld-noarch/conda-bld-noarch.tgz $HOME
          pushd $HOME
          tar xzf conda-bld-noarch.tgz
          popd
          tar xvzf bokehjs-build/bokehjs-build.tgz

      - name: Install test packages
        shell: bash
        run: |
          conda install --yes --quiet python=${{ matrix.python-version }} jinja2 pyyaml
          conda install --yes --quiet --use-local bokeh `python scripts/deps.py run test`
          conda install --yes --quiet distributed
          conda install --yes --quiet -c pyviz/label/dev holoviews nose
          pip install pandas_bokeh
          pip install geopandas

      - name: Run tests
        shell: bash
        run: |
          set +e
          pushd `python -c "import site; print(site.getsitepackages()[0])"`
          py.test distributed/dashboard
          nosetests holoviews/tests/plotting/bokeh
          git clone https://github.com/PatrikHlobil/Pandas-Bokeh.git
          pytest Pandas-Bokeh/Tests/test_PandasBokeh.py
          pytest Pandas-Bokeh/Tests/test_GeoPandasBokeh.py
          popd
          exit 0

name: Release - Deploy

env:
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  BOKEH_VERSION: ${{ github.event.inputs.version }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
  RELEASE_MAINTAINERS: ${{ secrets.RELEASE_MAINTAINERS }}
  SLACK_TOKEN: ${{ secrets.SLACK_BUILD_RELEASE_TOKEN }}

defaults:
  run:
     shell: bash -l {0}

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to deploy a release for (e.g. 3.0.0, 2.4.0.dev8)"
        required: true

jobs:

  setup:
    runs-on: ubuntu-20.04

    outputs:
      checks: ${{ steps.generate-deploy-config.outputs.checks }}
      steps: ${{ steps.generate-deploy-config.outputs.steps }}

    steps:
      - name: Check Maintainer
        run: |
          if echo "$RELEASE_MAINTAINERS" | grep -qE "^${{github.actor}}$"; then
            echo
            echo "User is authorized to deploy releases, proceeding with release deploy for $BOKEH_VERSION"
            exit 0
          fi
          echo
          echo "User is NOT authorized to deploy releases, aborting..."
          echo
          echo "Please contact @bokeh/core about conducting releases."
          exit 1

      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: 'latest'
          activate-environment: bk-release-deploy
          environment-file: ci/environment-release-deploy.yml

      - name: Generate deploy configuration
        id: generate-deploy-config
        run: |
          python -m release generate-config $BOKEH_VERSION

          CHECKS=`python -m release generate-deploy-checks`
          echo ::set-output name=checks::${CHECKS}

          STEPS=`python -m release generate-deploy-steps`
          echo ::set-output name=steps::${STEPS}

  checks:
    runs-on: ubuntu-20.04
    needs:
      - setup

    strategy:
      max-parallel: 1
      matrix:
        check: ${{ fromJSON(needs.setup.outputs.checks) }}

    steps:
      - name: Build check (${{ matrix.check }})
        run: python -m release ${{ maxtrix.check }}

  deploy:
    runs-on: ubuntu-20.04
    needs:
      - checks

    strategy:
      max-parallel: 1
      matrix:
        step: ${{ fromJSON(needs.setup.outputs.steps) }}

    steps:
      - name: Deploy (${{ matrix.step }})
        run: python -m release ${{ maxtrix.step }}

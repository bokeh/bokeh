.. _devguide_testing:

Running tests
=============

Bokeh is a large, multi-language project, and relies on varied and extensive
tests and testing tools in order to maintain capability and prevent
regressions.

This chapter describes how to run various tests in a
:ref:`local development environment <devguide_testing_local>` and in
:ref:`Bokeh's continuous integration (CI) system on GitHub <devguide_testing_ci>`.

.. _devguide_testing_local:

Local testing
-------------

Almost all of Bokeh's tests can be run locally. Before committing changes to the
Bokeh repository, you should always run the corresponding tests. This will help
make sure that your code does not introduce bugs and other issues.

Check basic requirements
~~~~~~~~~~~~~~~~~~~~~~~~

Before attempting to run Bokeh tests locally, make sure you have successfully
completed all of the steps in the :ref:`devguide_setup` section of this
contributors guide.

Several tests also require `Selenium`_ and a corresponding `web driver`_ to be
available on your system. See :ref:`userguide_export_dependencies` for
installation instructions and more information.

On some Unix platforms, you may also need to increase the "maximum
number of open file descriptors". Some tests open many files when testing the
server, so this number should be at least 1024.

.. code-block:: sh

    ulimit -n 1024

Run Python tests
~~~~~~~~~~~~~~~~

Codebase tests
    The most basic set of tests are Bokeh's codebase tests. This includes basic
    linting with `flake8` and other tests for issues such as unused imports and
    extra white spaces. Run this command from the top level of the repository:

    .. code-block:: sh

        pytest tests/codebase

Unit tests
    To run all basic Python unit tests, run the following command at the top
    level of the repository:

    .. code-block:: sh

        pytest tests/unit

    Note that this includes unit tests that require `Selenium`_ and an
    appropriate `web driver`_ to be installed. Use the following command to
    exclude any unit tests that require Selenium:

    .. code-block:: sh

        pytest -m "not selenium" tests/unit

Integration tests
    To run Bokeh's Python-focused integration tests, run this command from the top level
    of the repository:

    .. code-block:: sh

        pytest tests/integration

    These tests mostly simulate UI interactions. Therefore, they require
    `Selenium`_ and a working `web driver`_.

Code coverage tests
    To create a coverage report, use ``pytest`` with the command line option
    ``--cov=bokeh``:

    .. code-block:: sh

        pytest --cov=bokeh

    You also have the option to add ``--cov=bokeh`` when running a test. This
    adds a coverage report to any tests. For example:

    .. code-block:: sh

        pytest tests/codebase --cov=bokeh

    .. seealso::
        Coverage tests use the pytest plugin `pytest-cov`_. For more
        information, see the `documentation for pytest-cov`_.

Examples tests
    The ``examples`` tests run a selection of the examples in the Bokeh
    repository and generate images to compare against images generated by
    previous releases. Running these tests also generates a report that displays
    the current and previous images, as well as any image difference.

    .. note::
        The tests currently don't fail if the images are different, you need to
        inspect the test report manually.

    Run the examples with the following commands:

    .. code-block:: sh

        cd bokehjs
        node make test:spawn:headless
        cd ..
        pytest tests/test_examples.py

    After the tests have run, you will be able to see the test report at
    ``examples.html``. Running locally, you can name the test report whatever
    you want.

    The examples tests can run slowly. To speed them up, you can parallelize
    them with the command line option `-n`. The number you supply to `-n` is
    the number of cores you want to use. For example:

    .. code-block:: sh

        pytest --report-path=examples.html -n 5 test_examples.py

    In addition, the examples tests generate a log file, examples.log which you
    can view at ``examples.log`` in the same directory that you the tests
    were run from.

Run all available tests
    You can run all available tests (Python and TypeScript unit tests, example,
    and integration tests) by running the following command from the top-level
    directory:

    .. code-block:: sh

        pytest

Select specific tests
    To test a subset of the Bokeh package, pass a path to ``pytest``:

    .. code-block:: sh

        pytest --cov=bokeh bokeh/models/widgets

    A convenient way to select or deselect specific tests is to use markers.
    Currently, Bokeh's tests use the following two markers:

    * ``sampledata``: a test that requires ``bokeh.sampledata`` to be downloaded
    * ``selenium``: a test that requires selenium

    For more information on setting your own markers, see
    `Working with custom markers` in the `pytest documentation`_. To learn more
    about pytest's various options to selec specific tests, see
    `Specifying which tests to run`_.

.. seealso::
    See the `pytest documentation`_ for more information on ``pytest`` and its
    options.


Run TypeScript tests
~~~~~~~~~~~~~~~~~~~~

**[This sub-section TBD]**

To run unit tests for :term:`BokehJS`, run:

.. code-block:: sh

    pytest tests/test_bokehjs.py

Alternatively, you can also navigate to the `bokehjs` subdirectory of the
source checkout and run:

.. code-block:: sh

    node make test

.. _devguide_testing_ci:

Continuous Integration
----------------------

**[This section TBD]**

Every push to the ``main`` branch or any Pull Request branch on GitHub
automatically triggers a full test build on the `GithubCI`_ continuous
integration service.

You can see the list of all current and previous builds at this URL:
https://github.com/bokeh/bokeh/actions

Environment files
~~~~~~~~~~~~~~~~~

if you add or update dependencies in environment.yml, you will most likely also
need to update those
ymls

Configuration
~~~~~~~~~~~~~

There are a number of files that affect the build configuration:

* :bokeh-tree:`conda.recipe/meta.yaml`
    Instructions for building a conda noarch package for Bokeh. This
    file is the single source of truth for build and test (but not
    runtime) dependencies.

* :bokeh-tree:`setup.py`
    Used to build sdist packages and "dev" installs. This file is also
    the single source of truth for runtime dependencies.

* :bokeh-tree:`setup.cfg`
    Contains some global configuration for build and test tools such as
    ``versioneer`` and ``pytest``.

Etiquette
~~~~~~~~~

CI services provide finite free build workers to Open Source projects. Grouping
commits into meaningful chunks of work before pushing to GitHub instead of
pushing every commit individually will help you be considerate of others
requiring these limited resources.

.. _flake8: https://gitlab.com/pycqa/flake8
.. _Selenium: https://www.selenium.dev/documentation/en/
.. _web driver: https://www.selenium.dev/documentation/en/webdriver/
.. _pytest-cov: https://github.com/pytest-dev/pytest-cov
.. _Specifying which tests to run: https://docs.pytest.org/en/latest/how-to/usage.html#specifying-which-tests-to-run
.. _documentation for pytest-cov: https://pytest-cov.readthedocs.io/en/latest/
.. _GithubCI: https://github.com/bokeh/bokeh/actions
.. _Working with custom markers: http://pytest.org/latest/example/markers.html#working-with-custom-markers
.. _pytest documentation: https://docs.pytest.org
